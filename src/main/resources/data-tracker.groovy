import java.text.SimpleDateFormat;
import java.text.DateFormat;
import io.dbmaster.tools.excelsync.ExcelSync;
import org.apache.commons.lang.StringEscapeUtils;
import com.branegy.email.EmailSender
import com.branegy.tools.model.AdhocReportConfig
import com.branegy.tools.api.ExportType

// TODO (Vitaly) hide PrimitiveMapDecoder class behind API
import com.branegy.dbmaster.gwt.module.tools.model.PrimitiveMapDecoder

def toolService = dbm.getService(com.branegy.tools.api.ToolService.class)

// TODO Rename quick link or shortcuts (there should be the same terminology)
AdhocReportConfig shortcut =  toolService.findQuickLink(p_tool_id, p_shortcut)

// TODO (Vitaly) hide PrimitiveMapDecoder class behind API

def paramsMap = shortcut.getParameters()
if (paramsMap!=null && !paramsMap.isEmpty()) {
    paramsMap = PrimitiveMapDecoder.decode(paramsMap)
}

//def result = 
// SqlServerLoginAudit.getLoginAuditList(dbm, logeger, p_servers, p_resolve_hosts);

def executor = toolService.toolExecutor(shortcut.getBaseReportId(), paramsMap, ExportType.HTML)
def executeResult = executor.execute()
def header = executeResult.getHeader()
List<Object[]> list = header.get("result")


def getNotNull(Object o) {
    if (o instanceof Date) {
        return DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, Locale.US).format(o)
    }
    return o == null? "" : o.toString()
}

ExcelSync excelSync = new ExcelSync(
    Arrays.asList(p_columns.split("\\s*,\\s*")),
    Arrays.asList(p_key_columns.split("\\s*,\\s*")), //["Server","Principal","Source"]
    p_status_column,
    p_new_status,
    p_old_status,
    new HashSet(Arrays.asList(p_ignore_statuses.split("\\s*,\\s*"))),
    new HashSet(Arrays.asList(p_final_statuses.split("\\s*,\\s*"))), // ["Ignore","AutoClosed","Closed"] as Set,
    new File(p_tracking_file),
    logger,
    p_backup_flag
);

logger.debug("List size is ${list.size()}")

list.each {  excelSync.addRow(it) }

int[] score = excelSync.syncAndReturnScore()

println "During update ${score[0]} new issue(s) were found and ${score[1]} were automatically closed. Total open issues ${score[2]}<br/>"+
 "Review issues at <a href='${new File(p_tracking_file).toURI()}'>${p_tracking_file}</a>";

if (p_email_to != null) {
    EmailSender sender = dbm.getService(EmailSender.class);
    
    def context = new Binding()
    context.newRecords = score[0]
    context.oldRecords = score[1]
    context.openRecords = score[2]

    def email_body = new GroovyShell(context).evaluate(p_email_body)

/*    String msg = """
Login audit tracking worksheet was automatically updated by DBMaster.

During update ${score[0]} new issue(s) were found and ${score[1]} were automatically closed.

Total open issues ${score[2]}

Review issues at ${p_tracking_file}.

---------------------------------------
This message was automatically generated by DBMaster plugin
""";
*/  
    sender.createMessage(p_email_to, p_email_subject, email_body, false);
    sender.sendMessage();
}